{"ast":null,"code":"import { __spreadArray } from 'tslib';\nimport { parse } from 'content-type';\nvar cache = new Map();\nvar cloneSvg = function cloneSvg(sourceSvg) {\n  return sourceSvg.cloneNode(true);\n};\nvar isLocal = function isLocal() {\n  return window.location.protocol === 'file:';\n};\nvar makeAjaxRequest = function makeAjaxRequest(url, httpRequestWithCredentials, callback) {\n  var httpRequest = new XMLHttpRequest();\n  httpRequest.onreadystatechange = function () {\n    try {\n      if (!/\\.svg/i.test(url) && httpRequest.readyState === 2) {\n        var contentType = httpRequest.getResponseHeader('Content-Type');\n        if (!contentType) {\n          throw new Error('Content type not found');\n        }\n        var type = parse(contentType).type;\n        if (!(type === 'image/svg+xml' || type === 'text/plain')) {\n          throw new Error(\"Invalid content type: \".concat(type));\n        }\n      }\n      if (httpRequest.readyState === 4) {\n        if (httpRequest.status === 404 || httpRequest.responseXML === null) {\n          throw new Error(isLocal() ? 'Note: SVG injection ajax calls do not work locally without ' + 'adjusting security settings in your browser. Or consider ' + 'using a local webserver.' : 'Unable to load SVG file: ' + url);\n        }\n        if (httpRequest.status === 200 || isLocal() && httpRequest.status === 0) {\n          callback(null, httpRequest);\n        } else {\n          throw new Error('There was a problem injecting the SVG: ' + httpRequest.status + ' ' + httpRequest.statusText);\n        }\n      }\n    } catch (error) {\n      httpRequest.abort();\n      if (error instanceof Error) {\n        callback(error, httpRequest);\n      } else {\n        throw error;\n      }\n    }\n  };\n  httpRequest.open('GET', url);\n  httpRequest.withCredentials = httpRequestWithCredentials;\n  if (httpRequest.overrideMimeType) {\n    httpRequest.overrideMimeType('text/xml');\n  }\n  httpRequest.send();\n};\nvar requestQueue = {};\nvar queueRequest = function queueRequest(url, callback) {\n  requestQueue[url] = requestQueue[url] || [];\n  requestQueue[url].push(callback);\n};\nvar processRequestQueue = function processRequestQueue(url) {\n  var _loop_1 = function _loop_1(i, len) {\n    setTimeout(function () {\n      if (Array.isArray(requestQueue[url])) {\n        var cacheValue = cache.get(url);\n        var callback = requestQueue[url][i];\n        if (cacheValue instanceof SVGSVGElement) {\n          callback(null, cloneSvg(cacheValue));\n        }\n        if (cacheValue instanceof Error) {\n          callback(cacheValue);\n        }\n        if (i === requestQueue[url].length - 1) {\n          delete requestQueue[url];\n        }\n      }\n    }, 0);\n  };\n  for (var i = 0, len = requestQueue[url].length; i < len; i++) {\n    _loop_1(i);\n  }\n};\nvar loadSvgCached = function loadSvgCached(url, httpRequestWithCredentials, callback) {\n  if (cache.has(url)) {\n    var cacheValue = cache.get(url);\n    if (cacheValue === undefined) {\n      queueRequest(url, callback);\n      return;\n    }\n    if (cacheValue instanceof SVGSVGElement) {\n      callback(null, cloneSvg(cacheValue));\n      return;\n    }\n  }\n  cache.set(url, undefined);\n  queueRequest(url, callback);\n  makeAjaxRequest(url, httpRequestWithCredentials, function (error, httpRequest) {\n    if (error) {\n      cache.set(url, error);\n    } else if (httpRequest.responseXML instanceof Document && httpRequest.responseXML.documentElement && httpRequest.responseXML.documentElement instanceof SVGSVGElement) {\n      cache.set(url, httpRequest.responseXML.documentElement);\n    }\n    processRequestQueue(url);\n  });\n};\nvar loadSvgUncached = function loadSvgUncached(url, httpRequestWithCredentials, callback) {\n  makeAjaxRequest(url, httpRequestWithCredentials, function (error, httpRequest) {\n    if (error) {\n      callback(error);\n    } else if (httpRequest.responseXML instanceof Document && httpRequest.responseXML.documentElement && httpRequest.responseXML.documentElement instanceof SVGSVGElement) {\n      callback(null, httpRequest.responseXML.documentElement);\n    }\n  });\n};\nvar idCounter = 0;\nvar uniqueId = function uniqueId() {\n  return ++idCounter;\n};\nvar injectedElements = [];\nvar ranScripts = {};\nvar svgNamespace = 'http://www.w3.org/2000/svg';\nvar xlinkNamespace = 'http://www.w3.org/1999/xlink';\nvar injectElement = function injectElement(el, evalScripts, renumerateIRIElements, cacheRequests, httpRequestWithCredentials, beforeEach, callback) {\n  var elUrl = el.getAttribute('data-src') || el.getAttribute('src');\n  if (!elUrl) {\n    callback(new Error('Invalid data-src or src attribute'));\n    return;\n  }\n  if (injectedElements.indexOf(el) !== -1) {\n    injectedElements.splice(injectedElements.indexOf(el), 1);\n    el = null;\n    return;\n  }\n  injectedElements.push(el);\n  el.setAttribute('src', '');\n  var loadSvg = cacheRequests ? loadSvgCached : loadSvgUncached;\n  loadSvg(elUrl, httpRequestWithCredentials, function (error, svg) {\n    if (!svg) {\n      injectedElements.splice(injectedElements.indexOf(el), 1);\n      el = null;\n      callback(error);\n      return;\n    }\n    var elId = el.getAttribute('id');\n    if (elId) {\n      svg.setAttribute('id', elId);\n    }\n    var elTitle = el.getAttribute('title');\n    if (elTitle) {\n      svg.setAttribute('title', elTitle);\n    }\n    var elWidth = el.getAttribute('width');\n    if (elWidth) {\n      svg.setAttribute('width', elWidth);\n    }\n    var elHeight = el.getAttribute('height');\n    if (elHeight) {\n      svg.setAttribute('height', elHeight);\n    }\n    var mergedClasses = Array.from(new Set(__spreadArray(__spreadArray(__spreadArray([], (svg.getAttribute('class') || '').split(' '), true), ['injected-svg'], false), (el.getAttribute('class') || '').split(' '), true))).join(' ').trim();\n    svg.setAttribute('class', mergedClasses);\n    var elStyle = el.getAttribute('style');\n    if (elStyle) {\n      svg.setAttribute('style', elStyle);\n    }\n    svg.setAttribute('data-src', elUrl);\n    var elData = [].filter.call(el.attributes, function (at) {\n      return /^data-\\w[\\w-]*$/.test(at.name);\n    });\n    Array.prototype.forEach.call(elData, function (dataAttr) {\n      if (dataAttr.name && dataAttr.value) {\n        svg.setAttribute(dataAttr.name, dataAttr.value);\n      }\n    });\n    if (renumerateIRIElements) {\n      var iriElementsAndProperties_1 = {\n        clipPath: ['clip-path'],\n        'color-profile': ['color-profile'],\n        cursor: ['cursor'],\n        filter: ['filter'],\n        linearGradient: ['fill', 'stroke'],\n        marker: ['marker', 'marker-start', 'marker-mid', 'marker-end'],\n        mask: ['mask'],\n        path: [],\n        pattern: ['fill', 'stroke'],\n        radialGradient: ['fill', 'stroke']\n      };\n      var element_1;\n      var elements_1;\n      var properties_1;\n      var currentId_1;\n      var newId_1;\n      Object.keys(iriElementsAndProperties_1).forEach(function (key) {\n        element_1 = key;\n        properties_1 = iriElementsAndProperties_1[key];\n        elements_1 = svg.querySelectorAll(element_1 + '[id]');\n        var _loop_1 = function _loop_1(a, elementsLen) {\n          currentId_1 = elements_1[a].id;\n          newId_1 = currentId_1 + '-' + uniqueId();\n          var referencingElements;\n          Array.prototype.forEach.call(properties_1, function (property) {\n            referencingElements = svg.querySelectorAll('[' + property + '*=\"' + currentId_1 + '\"]');\n            for (var b = 0, referencingElementLen = referencingElements.length; b < referencingElementLen; b++) {\n              var attrValue = referencingElements[b].getAttribute(property);\n              if (attrValue && !attrValue.match(new RegExp('url\\\\(\"?#' + currentId_1 + '\"?\\\\)'))) {\n                continue;\n              }\n              referencingElements[b].setAttribute(property, 'url(#' + newId_1 + ')');\n            }\n          });\n          var allLinks = svg.querySelectorAll('[*|href]');\n          var links = [];\n          for (var c = 0, allLinksLen = allLinks.length; c < allLinksLen; c++) {\n            var href = allLinks[c].getAttributeNS(xlinkNamespace, 'href');\n            if (href && href.toString() === '#' + elements_1[a].id) {\n              links.push(allLinks[c]);\n            }\n          }\n          for (var d = 0, linksLen = links.length; d < linksLen; d++) {\n            links[d].setAttributeNS(xlinkNamespace, 'href', '#' + newId_1);\n          }\n          elements_1[a].id = newId_1;\n        };\n        for (var a = 0, elementsLen = elements_1.length; a < elementsLen; a++) {\n          _loop_1(a);\n        }\n      });\n    }\n    svg.removeAttribute('xmlns:a');\n    var scripts = svg.querySelectorAll('script');\n    var scriptsToEval = [];\n    var script;\n    var scriptType;\n    for (var i = 0, scriptsLen = scripts.length; i < scriptsLen; i++) {\n      scriptType = scripts[i].getAttribute('type');\n      if (!scriptType || scriptType === 'application/ecmascript' || scriptType === 'application/javascript' || scriptType === 'text/javascript') {\n        script = scripts[i].innerText || scripts[i].textContent;\n        if (script) {\n          scriptsToEval.push(script);\n        }\n        svg.removeChild(scripts[i]);\n      }\n    }\n    if (scriptsToEval.length > 0 && (evalScripts === 'always' || evalScripts === 'once' && !ranScripts[elUrl])) {\n      for (var l = 0, scriptsToEvalLen = scriptsToEval.length; l < scriptsToEvalLen; l++) {\n        new Function(scriptsToEval[l])(window);\n      }\n      ranScripts[elUrl] = true;\n    }\n    var styleTags = svg.querySelectorAll('style');\n    Array.prototype.forEach.call(styleTags, function (styleTag) {\n      styleTag.textContent += '';\n    });\n    svg.setAttribute('xmlns', svgNamespace);\n    svg.setAttribute('xmlns:xlink', xlinkNamespace);\n    beforeEach(svg);\n    if (!el.parentNode) {\n      injectedElements.splice(injectedElements.indexOf(el), 1);\n      el = null;\n      callback(new Error('Parent node is null'));\n      return;\n    }\n    el.parentNode.replaceChild(svg, el);\n    injectedElements.splice(injectedElements.indexOf(el), 1);\n    el = null;\n    callback(null, svg);\n  });\n};\nvar SVGInjector = function SVGInjector(elements, _a) {\n  var _b = _a === void 0 ? {} : _a,\n    _c = _b.afterAll,\n    afterAll = _c === void 0 ? function () {\n      return undefined;\n    } : _c,\n    _d = _b.afterEach,\n    afterEach = _d === void 0 ? function () {\n      return undefined;\n    } : _d,\n    _e = _b.beforeEach,\n    beforeEach = _e === void 0 ? function () {\n      return undefined;\n    } : _e,\n    _f = _b.cacheRequests,\n    cacheRequests = _f === void 0 ? true : _f,\n    _g = _b.evalScripts,\n    evalScripts = _g === void 0 ? 'never' : _g,\n    _h = _b.httpRequestWithCredentials,\n    httpRequestWithCredentials = _h === void 0 ? false : _h,\n    _j = _b.renumerateIRIElements,\n    renumerateIRIElements = _j === void 0 ? true : _j;\n  if (elements && 'length' in elements) {\n    var elementsLoaded_1 = 0;\n    for (var i = 0, j = elements.length; i < j; i++) {\n      injectElement(elements[i], evalScripts, renumerateIRIElements, cacheRequests, httpRequestWithCredentials, beforeEach, function (error, svg) {\n        afterEach(error, svg);\n        if (elements && 'length' in elements && elements.length === ++elementsLoaded_1) {\n          afterAll(elementsLoaded_1);\n        }\n      });\n    }\n  } else if (elements) {\n    injectElement(elements, evalScripts, renumerateIRIElements, cacheRequests, httpRequestWithCredentials, beforeEach, function (error, svg) {\n      afterEach(error, svg);\n      afterAll(1);\n      elements = null;\n    });\n  } else {\n    afterAll(0);\n  }\n};\nexport { SVGInjector };","map":{"version":3,"mappings":"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","names":["cache","cloneSvg","cloneNode","isLocal","makeAjaxRequest","callback","httpRequest","type","Error","requestQueue","queueRequest","len","setTimeout","url","i","httpRequestWithCredentials","SVGSVGElement","loadSvgUncached","Document","idCounter","uniqueId","injectedElements","ranScripts","xlinkNamespace","el","renumerateIRIElements","beforeEach","elUrl","getAttribute","cacheRequests","loadSvg","svg","setAttribute","elWidth","split","join","trim","mergedClasses","call","at","Array","clipPath","filter","linearGradient","marker","pattern","elements_1","properties_1","newId_1","Object","keys","element_1","a","elementsLen","prototype","forEach","referencingElements","elements","_a","_b","_c","afterAll","undefined","_f","_g","evalScripts","_h"],"sources":["/Users/Zach/Desktop/todo-app-main/task-app/node_modules/@tanem/svg-injector/src/cache.ts","/Users/Zach/Desktop/todo-app-main/task-app/node_modules/@tanem/svg-injector/src/clone-svg.ts","/Users/Zach/Desktop/todo-app-main/task-app/node_modules/@tanem/svg-injector/src/is-local.ts","/Users/Zach/Desktop/todo-app-main/task-app/node_modules/@tanem/svg-injector/src/make-ajax-request.ts","/Users/Zach/Desktop/todo-app-main/task-app/node_modules/@tanem/svg-injector/src/request-queue.ts","/Users/Zach/Desktop/todo-app-main/task-app/node_modules/@tanem/svg-injector/src/load-svg-cached.ts","/Users/Zach/Desktop/todo-app-main/task-app/node_modules/@tanem/svg-injector/src/load-svg-uncached.ts","/Users/Zach/Desktop/todo-app-main/task-app/node_modules/@tanem/svg-injector/src/unique-id.ts","/Users/Zach/Desktop/todo-app-main/task-app/node_modules/@tanem/svg-injector/src/inject-element.ts","/Users/Zach/Desktop/todo-app-main/task-app/node_modules/@tanem/svg-injector/src/svg-injector.ts"],"sourcesContent":["const cache = new Map<string, SVGSVGElement | Error | undefined>()\n\nexport default cache\n","const cloneSvg = (sourceSvg: SVGSVGElement) =>\n  sourceSvg.cloneNode(true) as SVGSVGElement\n\nexport default cloneSvg\n","const isLocal = () => window.location.protocol === 'file:'\n\nexport default isLocal\n","import { parse as parseContentType } from 'content-type'\nimport isLocal from './is-local'\n\nconst makeAjaxRequest = (\n  url: string,\n  httpRequestWithCredentials: boolean,\n  callback: (error: Error | null, httpRequest: XMLHttpRequest) => void\n) => {\n  const httpRequest = new XMLHttpRequest()\n\n  httpRequest.onreadystatechange = () => {\n    try {\n      if (!/\\.svg/i.test(url) && httpRequest.readyState === 2) {\n        const contentType = httpRequest.getResponseHeader('Content-Type')\n        if (!contentType) {\n          throw new Error('Content type not found')\n        }\n\n        const { type } = parseContentType(contentType)\n        if (!(type === 'image/svg+xml' || type === 'text/plain')) {\n          throw new Error(`Invalid content type: ${type}`)\n        }\n      }\n\n      if (httpRequest.readyState === 4) {\n        if (httpRequest.status === 404 || httpRequest.responseXML === null) {\n          throw new Error(\n            isLocal()\n              ? 'Note: SVG injection ajax calls do not work locally without ' +\n                'adjusting security settings in your browser. Or consider ' +\n                'using a local webserver.'\n              : 'Unable to load SVG file: ' + url\n          )\n        }\n\n        if (\n          httpRequest.status === 200 ||\n          (isLocal() && httpRequest.status === 0)\n        ) {\n          callback(null, httpRequest)\n        } else {\n          throw new Error(\n            'There was a problem injecting the SVG: ' +\n              httpRequest.status +\n              ' ' +\n              httpRequest.statusText\n          )\n        }\n      }\n    } catch (error) {\n      httpRequest.abort()\n      if (error instanceof Error) {\n        callback(error, httpRequest)\n      } else {\n        throw error\n      }\n    }\n  }\n\n  httpRequest.open('GET', url)\n\n  httpRequest.withCredentials = httpRequestWithCredentials\n\n  /* istanbul ignore else */\n  if (httpRequest.overrideMimeType) {\n    httpRequest.overrideMimeType('text/xml')\n  }\n\n  httpRequest.send()\n}\n\nexport default makeAjaxRequest\n","import cache from './cache'\nimport cloneSvg from './clone-svg'\nimport { Errback } from './types'\n\nlet requestQueue: { [key: string]: Errback[] } = {}\n\nexport const clear = () => {\n  requestQueue = {}\n}\n\nexport const queueRequest = (url: string, callback: Errback) => {\n  requestQueue[url] = requestQueue[url] || []\n  requestQueue[url].push(callback)\n}\n\nexport const processRequestQueue = (url: string) => {\n  for (let i = 0, len = requestQueue[url].length; i < len; i++) {\n    // Make these calls async so we avoid blocking the page/renderer.\n    setTimeout(() => {\n      /* istanbul ignore else */\n      if (Array.isArray(requestQueue[url])) {\n        const cacheValue = cache.get(url)\n        const callback = requestQueue[url][i]\n\n        /* istanbul ignore else */\n        if (cacheValue instanceof SVGSVGElement) {\n          callback(null, cloneSvg(cacheValue))\n        }\n\n        /* istanbul ignore else */\n        if (cacheValue instanceof Error) {\n          callback(cacheValue)\n        }\n\n        /* istanbul ignore else */\n        if (i === requestQueue[url].length - 1) {\n          delete requestQueue[url]\n        }\n      }\n    }, 0)\n  }\n}\n","import cache from './cache'\nimport cloneSvg from './clone-svg'\nimport makeAjaxRequest from './make-ajax-request'\nimport { processRequestQueue, queueRequest } from './request-queue'\nimport { Errback } from './types'\n\nconst loadSvgCached = (\n  url: string,\n  httpRequestWithCredentials: boolean,\n  callback: Errback\n) => {\n  if (cache.has(url)) {\n    const cacheValue = cache.get(url)\n\n    if (cacheValue === undefined) {\n      queueRequest(url, callback)\n      return\n    }\n\n    /* istanbul ignore else */\n    if (cacheValue instanceof SVGSVGElement) {\n      callback(null, cloneSvg(cacheValue))\n      return\n    }\n\n    // Errors are always refetched.\n  }\n\n  // Seed the cache to indicate we are loading this URL.\n  cache.set(url, undefined)\n  queueRequest(url, callback)\n\n  makeAjaxRequest(url, httpRequestWithCredentials, (error, httpRequest) => {\n    /* istanbul ignore else */\n    if (error) {\n      cache.set(url, error)\n    } else if (\n      httpRequest.responseXML instanceof Document &&\n      httpRequest.responseXML.documentElement &&\n      httpRequest.responseXML.documentElement instanceof SVGSVGElement\n    ) {\n      cache.set(url, httpRequest.responseXML.documentElement)\n    }\n    processRequestQueue(url)\n  })\n}\n\nexport default loadSvgCached\n","import makeAjaxRequest from './make-ajax-request'\nimport { Errback } from './types'\n\nconst loadSvgUncached = (\n  url: string,\n  httpRequestWithCredentials: boolean,\n  callback: Errback\n) => {\n  makeAjaxRequest(url, httpRequestWithCredentials, (error, httpRequest) => {\n    /* istanbul ignore else */\n    if (error) {\n      callback(error)\n    } else if (\n      httpRequest.responseXML instanceof Document &&\n      httpRequest.responseXML.documentElement &&\n      httpRequest.responseXML.documentElement instanceof SVGSVGElement\n    ) {\n      callback(null, httpRequest.responseXML.documentElement)\n    }\n  })\n}\n\nexport default loadSvgUncached\n","let idCounter = 0\nconst uniqueId = () => ++idCounter\nexport default uniqueId\n","import loadSvgCached from './load-svg-cached'\nimport loadSvgUncached from './load-svg-uncached'\nimport { BeforeEach, Errback, EvalScripts } from './types'\nimport uniqueId from './unique-id'\n\ntype ElementType = Element | HTMLElement | null\n\nconst injectedElements: ElementType[] = []\nconst ranScripts: { [key: string]: boolean } = {}\nconst svgNamespace = 'http://www.w3.org/2000/svg'\nconst xlinkNamespace = 'http://www.w3.org/1999/xlink'\n\nconst injectElement = (\n  el: NonNullable<ElementType>,\n  evalScripts: EvalScripts,\n  renumerateIRIElements: boolean,\n  cacheRequests: boolean,\n  httpRequestWithCredentials: boolean,\n  beforeEach: BeforeEach,\n  callback: Errback\n) => {\n  const elUrl = el.getAttribute('data-src') || el.getAttribute('src')\n\n  /* istanbul ignore else */\n  if (!elUrl) {\n    callback(new Error('Invalid data-src or src attribute'))\n    return\n  }\n\n  // Make sure we aren't already in the process of injecting this element to\n  // avoid a race condition if multiple injections for the same element are run.\n  // :NOTE: Using indexOf() only _after_ we check for SVG support and bail, so\n  // no need for IE8 indexOf() polyfill.\n  /* istanbul ignore else */\n  if (injectedElements.indexOf(el) !== -1) {\n    // TODO: Extract.\n    injectedElements.splice(injectedElements.indexOf(el), 1)\n    ;(el as ElementType) = null\n    return\n  }\n\n  // Remember the request to inject this element, in case other injection calls\n  // are also trying to replace this element before we finish.\n  injectedElements.push(el)\n\n  // Try to avoid loading the orginal image src if possible.\n  el.setAttribute('src', '')\n\n  const loadSvg = cacheRequests ? loadSvgCached : loadSvgUncached\n\n  loadSvg(elUrl, httpRequestWithCredentials, (error, svg) => {\n    /* istanbul ignore else */\n    if (!svg) {\n      // TODO: Extract.\n      injectedElements.splice(injectedElements.indexOf(el), 1)\n      ;(el as ElementType) = null\n      callback(error)\n      return\n    }\n\n    const elId = el.getAttribute('id')\n    /* istanbul ignore else */\n    if (elId) {\n      svg.setAttribute('id', elId)\n    }\n\n    const elTitle = el.getAttribute('title')\n    /* istanbul ignore else */\n    if (elTitle) {\n      svg.setAttribute('title', elTitle)\n    }\n\n    const elWidth = el.getAttribute('width')\n    /* istanbul ignore else */\n    if (elWidth) {\n      svg.setAttribute('width', elWidth)\n    }\n\n    const elHeight = el.getAttribute('height')\n    /* istanbul ignore else */\n    if (elHeight) {\n      svg.setAttribute('height', elHeight)\n    }\n\n    const mergedClasses = Array.from(\n      new Set([\n        ...(svg.getAttribute('class') || '').split(' '),\n        'injected-svg',\n        ...(el.getAttribute('class') || '').split(' '),\n      ])\n    )\n      .join(' ')\n      .trim()\n    svg.setAttribute('class', mergedClasses)\n\n    const elStyle = el.getAttribute('style')\n    /* istanbul ignore else */\n    if (elStyle) {\n      svg.setAttribute('style', elStyle)\n    }\n\n    svg.setAttribute('data-src', elUrl)\n\n    // Copy all the data elements to the svg.\n    const elData = [].filter.call(el.attributes, (at: Attr) => {\n      return /^data-\\w[\\w-]*$/.test(at.name)\n    })\n\n    Array.prototype.forEach.call(elData, (dataAttr: Attr) => {\n      /* istanbul ignore else */\n      if (dataAttr.name && dataAttr.value) {\n        svg.setAttribute(dataAttr.name, dataAttr.value)\n      }\n    })\n\n    /* istanbul ignore else */\n    if (renumerateIRIElements) {\n      // Make sure any internally referenced clipPath ids and their clip-path\n      // references are unique.\n      //\n      // This addresses the issue of having multiple instances of the same SVG\n      // on a page and only the first clipPath id is referenced.\n      //\n      // Browsers often shortcut the SVG Spec and don't use clipPaths contained\n      // in parent elements that are hidden, so if you hide the first SVG\n      // instance on the page, then all other instances lose their clipping.\n      // Reference: https://bugzilla.mozilla.org/show_bug.cgi?id=376027\n\n      // Handle all defs elements that have iri capable attributes as defined by\n      // w3c: http://www.w3.org/TR/SVG/linking.html#processingIRI. Mapping IRI\n      // addressable elements to the properties that can reference them.\n      const iriElementsAndProperties: { [key: string]: string[] } = {\n        clipPath: ['clip-path'],\n        'color-profile': ['color-profile'],\n        cursor: ['cursor'],\n        filter: ['filter'],\n        linearGradient: ['fill', 'stroke'],\n        marker: ['marker', 'marker-start', 'marker-mid', 'marker-end'],\n        mask: ['mask'],\n        path: [],\n        pattern: ['fill', 'stroke'],\n        radialGradient: ['fill', 'stroke'],\n      }\n\n      let element\n      let elements\n      let properties\n      let currentId: string\n      let newId: string\n\n      Object.keys(iriElementsAndProperties).forEach((key) => {\n        element = key\n        properties = iriElementsAndProperties[key]\n\n        elements = svg.querySelectorAll(element + '[id]')\n        for (let a = 0, elementsLen = elements.length; a < elementsLen; a++) {\n          currentId = elements[a].id\n          newId = currentId + '-' + uniqueId()\n\n          // All of the properties that can reference this element type.\n          let referencingElements\n          Array.prototype.forEach.call(properties, (property: string) => {\n            // :NOTE: using a substring match attr selector here to deal with IE\n            // \"adding extra quotes in url() attrs\".\n            referencingElements = svg.querySelectorAll(\n              '[' + property + '*=\"' + currentId + '\"]'\n            )\n            for (\n              let b = 0, referencingElementLen = referencingElements.length;\n              b < referencingElementLen;\n              b++\n            ) {\n              const attrValue: string | null =\n                referencingElements[b].getAttribute(property)\n              if (\n                attrValue &&\n                !attrValue.match(new RegExp('url\\\\(\"?#' + currentId + '\"?\\\\)'))\n              ) {\n                continue\n              }\n              referencingElements[b].setAttribute(\n                property,\n                'url(#' + newId + ')'\n              )\n            }\n          })\n\n          const allLinks = svg.querySelectorAll('[*|href]')\n          const links = []\n          for (let c = 0, allLinksLen = allLinks.length; c < allLinksLen; c++) {\n            const href = allLinks[c].getAttributeNS(xlinkNamespace, 'href')\n            /* istanbul ignore else */\n            if (href && href.toString() === '#' + elements[a].id) {\n              links.push(allLinks[c])\n            }\n          }\n          for (let d = 0, linksLen = links.length; d < linksLen; d++) {\n            links[d].setAttributeNS(xlinkNamespace, 'href', '#' + newId)\n          }\n\n          elements[a].id = newId\n        }\n      })\n    }\n\n    // Remove any unwanted/invalid namespaces that might have been added by SVG\n    // editing tools.\n    svg.removeAttribute('xmlns:a')\n\n    // Post page load injected SVGs don't automatically have their script\n    // elements run, so we'll need to make that happen, if requested.\n\n    // Find then prune the scripts.\n    const scripts = svg.querySelectorAll('script')\n    const scriptsToEval: string[] = []\n    let script\n    let scriptType\n\n    for (let i = 0, scriptsLen = scripts.length; i < scriptsLen; i++) {\n      scriptType = scripts[i].getAttribute('type')\n\n      // Only process javascript types. SVG defaults to 'application/ecmascript'\n      // for unset types.\n      /* istanbul ignore else */\n      if (\n        !scriptType ||\n        scriptType === 'application/ecmascript' ||\n        scriptType === 'application/javascript' ||\n        scriptType === 'text/javascript'\n      ) {\n        // innerText for IE, textContent for other browsers.\n        script = scripts[i].innerText || scripts[i].textContent\n\n        // Stash.\n        /* istanbul ignore else */\n        if (script) {\n          scriptsToEval.push(script)\n        }\n\n        // Tidy up and remove the script element since we don't need it anymore.\n        svg.removeChild(scripts[i])\n      }\n    }\n\n    // Run/Eval the scripts if needed.\n    /* istanbul ignore else */\n    if (\n      scriptsToEval.length > 0 &&\n      (evalScripts === 'always' ||\n        (evalScripts === 'once' && !ranScripts[elUrl]))\n    ) {\n      for (\n        let l = 0, scriptsToEvalLen = scriptsToEval.length;\n        l < scriptsToEvalLen;\n        l++\n      ) {\n        // :NOTE: Yup, this is a form of eval, but it is being used to eval code\n        // the caller has explictely asked to be loaded, and the code is in a\n        // caller defined SVG file... not raw user input.\n        //\n        // Also, the code is evaluated in a closure and not in the global scope.\n        // If you need to put something in global scope, use 'window'.\n        new Function(scriptsToEval[l])(window)\n      }\n\n      // Remember we already ran scripts for this svg.\n      ranScripts[elUrl] = true\n    }\n\n    // :WORKAROUND: IE doesn't evaluate <style> tags in SVGs that are\n    // dynamically added to the page. This trick will trigger IE to read and use\n    // any existing SVG <style> tags.\n    //\n    // Reference: https://github.com/iconic/SVGInjector/issues/23.\n    const styleTags = svg.querySelectorAll('style')\n    Array.prototype.forEach.call(styleTags, (styleTag: HTMLStyleElement) => {\n      styleTag.textContent += ''\n    })\n\n    svg.setAttribute('xmlns', svgNamespace)\n    svg.setAttribute('xmlns:xlink', xlinkNamespace)\n\n    beforeEach(svg)\n\n    if (!el.parentNode) {\n      injectedElements.splice(injectedElements.indexOf(el), 1)\n      ;(el as ElementType) = null\n      callback(new Error('Parent node is null'))\n      return\n    }\n\n    // Replace the image with the svg.\n    el.parentNode.replaceChild(svg, el)\n\n    // Now that we no longer need it, drop references to the original element so\n    // it can be GC'd.\n    // TODO: Extract\n    injectedElements.splice(injectedElements.indexOf(el), 1)\n    ;(el as ElementType) = null\n\n    callback(null, svg)\n  })\n}\n\nexport default injectElement\n","import injectElement from './inject-element'\nimport { AfterAll, BeforeEach, Errback, EvalScripts } from './types'\n\ntype Elements = HTMLCollectionOf<Element> | NodeListOf<Element> | Element | null\n\ninterface OptionalArgs {\n  afterAll?: AfterAll\n  afterEach?: Errback\n  beforeEach?: BeforeEach\n  cacheRequests?: boolean\n  evalScripts?: EvalScripts\n  httpRequestWithCredentials?: boolean\n  renumerateIRIElements?: boolean\n}\n\nconst SVGInjector = (\n  elements: Elements,\n  {\n    afterAll = () => undefined,\n    afterEach = () => undefined,\n    beforeEach = () => undefined,\n    cacheRequests = true,\n    evalScripts = 'never',\n    httpRequestWithCredentials = false,\n    renumerateIRIElements = true,\n  }: OptionalArgs = {}\n) => {\n  if (elements && 'length' in elements) {\n    let elementsLoaded = 0\n    for (let i = 0, j = elements.length; i < j; i++) {\n      injectElement(\n        elements[i],\n        evalScripts,\n        renumerateIRIElements,\n        cacheRequests,\n        httpRequestWithCredentials,\n        beforeEach,\n        (error, svg) => {\n          afterEach(error, svg)\n          if (\n            elements &&\n            'length' in elements &&\n            elements.length === ++elementsLoaded\n          ) {\n            afterAll(elementsLoaded)\n          }\n        }\n      )\n    }\n  } else if (elements) {\n    injectElement(\n      elements,\n      evalScripts,\n      renumerateIRIElements,\n      cacheRequests,\n      httpRequestWithCredentials,\n      beforeEach,\n      (error, svg) => {\n        afterEach(error, svg)\n        afterAll(1)\n        elements = null\n      }\n    )\n  } else {\n    afterAll(0)\n  }\n}\n\nexport default SVGInjector\n"]},"metadata":{},"sourceType":"module"}