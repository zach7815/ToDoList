import * as React from 'react';
import * as PropTypes from 'prop-types';
import { HeightData } from './MoveContainer';
interface Drag {
    itemKey: string;
    startY: number;
    mouseY: number;
    mouseOffset: number;
}
export interface TemplateProps<I, C> {
    item: I;
    itemSelected: number;
    anySelected: number;
    dragHandleProps: object;
    commonProps: C;
}
export interface Props<I, C, T> {
    itemKey: string | ((item: I) => string);
    template: new (props: any, context?: any) => T;
    list: ReadonlyArray<I>;
    onMoveEnd?: (newList: ReadonlyArray<I>, movedItem: I, oldIndex: number, newIndex: number) => void;
    container?: () => HTMLElement | null | undefined;
    constrainDrag?: boolean;
    springConfig?: object;
    padding?: number;
    unsetZIndex?: boolean;
    autoScrollMaxSpeed?: number;
    autoScrollRegionSize?: number;
    commonProps?: C;
    onDragStart?: () => void;
    onDragEnd?: () => void;
}
interface State {
    useAbsolutePositioning: boolean;
    dragging: boolean;
    lastDrag: Drag | null;
    heights: {
        [key: string]: HeightData;
    } | null;
}
export default class DraggableList<I, C, T extends React.Component<Partial<TemplateProps<I, C>>>> extends React.Component<Props<I, C, T>, State> {
    static propTypes: {
        itemKey: PropTypes.Validator<string | ((...args: any[]) => any)>;
        template: PropTypes.Requireable<(...args: any[]) => any>;
        list: PropTypes.Validator<any[]>;
        onMoveEnd: PropTypes.Requireable<(...args: any[]) => any>;
        container: PropTypes.Requireable<(...args: any[]) => any>;
        springConfig: PropTypes.Requireable<object>;
        constrainDrag: PropTypes.Requireable<boolean>;
        padding: PropTypes.Requireable<number>;
        unsetZIndex: PropTypes.Requireable<boolean>;
        autoScrollMaxSpeed: PropTypes.Validator<number>;
        autoScrollRegionSize: PropTypes.Validator<number>;
        commonProps: PropTypes.Requireable<object>;
    };
    static defaultProps: Partial<Props<any, any, any>>;
    private readonly _itemRefs;
    private _autoScrollerTimer;
    private _listRef;
    state: State;
    getItemInstance(key: string): T;
    static getDerivedStateFromProps<I, C, T>(newProps: Props<I, C, T>, state: State): Partial<State> | null;
    componentWillUnmount(): void;
    private _handleTouchStart;
    private _handleMouseDown;
    private _handleStartDrag;
    private _handleTouchMove;
    private _handleMouseMove;
    _handleMouseUp: () => void;
    _scrollContainer(delta: number): void;
    private _lastScrollDelta;
    _adjustScrollAtEnd(delta: number): void;
    static _getIndexOfItemWithKey<I>(keyFn: (item: I) => string, list: ReadonlyArray<I>, itemKey: string): number;
    _getDragListIndex(): number;
    _getDragVisualIndex(): number;
    _getVisualListDuringDrag(): ReadonlyArray<I>;
    _getItemHeight(key: string): HeightData;
    _getDistance(start: number, end: number, dragging: boolean, list?: ReadonlyArray<I>): number;
    _getDistanceFromTopDuringDrag(lastDrag: Drag, itemKey: string, visualList: ReadonlyArray<I>): number;
    private _getContainer;
    private static _getKeyFn;
    private _getKeyFn;
    render(): JSX.Element;
}
export {};
